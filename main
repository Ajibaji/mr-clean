#!/bin/bash

function populate_namespaces_array () {
    x=1
    for line in $namespaces ;
    do
        namespacesArray[x]=$line
        x=$((x+1))
    done
}

function populate_secrets_array () {
    x=1
    for secret in $secrets ;
    do
        secretsArray[x]=$secret
        x=$((x+1))
    done
}

function bring_it_all_down () {
    clear
    echo "KILLING ALL CHILD PROCESSES..."
    pkill -9 -g $parentPID
    echo "DONE"
    exit 0
}

function new_console () {
    clear
    echo "========================================================================"
    echo "Mr-Clean will now provide a 'BASH' shell inside the chosen Namespace"
    echo "Alpine with BASH, PSQL, NVIM, CURL, SSH, SSHPASS, PYTHON, "
    echo "PIP, JQ pre-installed"
    echo ""
    echo "A few Alpine pointers:"
    echo "  - 'apk add' is how stuff is installed"
    echo "  - 'l' instead of 'ls'"
    echo "  - 'nvim' instead pf 'vim' or 'vi'"
    echo "========================================================================"
    echo ""
    echo ""
    sleep 2
    kubectl run --generator=run-pod/v1 console$RANDOM --rm -i --tty --image $consoleImage -n $chosenNamespace -- bash
    #kubectl exec -it $podName -n $consoleNamespace -- bash
    bring_it_all_down
}

function have_a_shufti () {
    uri=$1
    owner=$2

    clear
    echo "====================================================================="
    echo "Mr-Clean will now provide a 'PSQL' shell onto:"
    echo "  - a database called, $owner"
    echo "  - using credentials from a secret called, $chosenSecret"
    echo "  - from the $chosenNamespace namespace"
    echo ""
    echo ""
    echo "A few PSQL pointers:"
    echo "  - \dt lists all tables"
    echo "  - \? will show HELP"
    echo "  - Syntax:"
    echo "    - commands aren't case sensitive"
    echo "    - entities are case sensitive and should always be in double quotes"
    echo "    - all statements must end in a semi-colon"
    echo '    e.g. select * from "Workshop";'
    echo "====================================================================="
    echo ""
    echo ""
    sleep 2
    kubectl run --generator=run-pod/v1 console$RANDOM --rm -i --tty --image $consoleImage -n $chosenNamespace -- psql $uri

    #kubectl exec -it $podName -n $consoleNamespace -- psql $uri
    bring_it_all_down
}

function clean_db () {
    uri=$1
    owner=$2

    if [ $unattended = "true" ]
    then
        kubectl run --generator=run-pod/v1 console$RANDOM --attach=false --quiet=true --rm --image $consoleImage -n $chosenNamespace -- psql $uri -c "drop owned by $owner;"
        #kubectl exec $podName -n $consoleNamespace -- psql $uri -c "drop owned by $owner;"
    else
        clear
        echo "====================================================================="
        echo "Mr-Clean is about to go to work on:"
        echo "  - a database called, $owner"
        echo "  - using credentials from a secret called, $chosenSecret"
        echo "  - from the $chosenNamespace namespace"
        echo "====================================================================="
        echo ""
        echo ""
        read -n 1 -p "ALL DATA WILL BE ERASED FROM THIS DATABASE. Are you sure you want to do this? (y/n) " areYouSure
        case $areYouSure in
            [yY] ) clear && kubectl run --generator=run-pod/v1 console$RANDOM --rm -i --tty --image $consoleImage -n $chosenNamespace -- psql $uri -c "drop owned by $owner;" ;;
            [nN] ) clear && echo "No databases have been touched" ;;
            *) echo "invalid entry" ;;
        esac
    fi
}

function decode_secret () {
    uri=$(kubectl get $chosenSecret -n $chosenNamespace -o=jsonpath='{.data.uri}' | base64 --decode | sed -e 's/?&sslmode=require//')

    # OSB sets db name as the same as the owner of all thats in it BUT the db itself is owned by a higher user
    owner=$(kubectl get $chosenSecret -n $chosenNamespace -o=jsonpath='{.data.database}' | base64 --decode)

    if [ $unattended = "true" ]
    then
        clean_db $uri $owner
    else
        secret_option_menu $uri $owner
    fi
}

function secret_option_menu () {
    uri=$1
    owner=$2

    clear
    echo "--------------------------------------"
    echo "     S H U F T I   or   C L E A N     "
    echo "--------------------------------------"
    echo ""
    echo "1 - Shufti - Yorkshire for, 'have a look at'"
    echo "2 - Clean"
    echo ""
    echo "q - EXIT"
    echo ""
    local choice
    read -p "What would you like to do with the chosen database? " choice
    case $choice in
        1) have_a_shufti $uri $owner ;;
        2) clean_db $uri $owner ;;
        q) bring_it_all_down ;;
        *) echo "Select a number from the list or press 'q' to exit" && sleep 2 && read_secrets_menu_options ;;
    esac

}

function read_secrets_menu_options () {
    local secretChoice
    read -p "Select secret " secretChoice
    chosenSecret=${secretsArray[$secretChoice]}
    case $secretChoice in
        $secretsOption ) decode_secret $chosenSecret ;;
        c) new_console ;;
        q) bring_it_all_down ;;
        *) echo "Select a number from the list or press 'q' to exit" && sleep 2 && read_secrets_menu_options ;;
    esac
}

function show_secrets_menu () {
    secrets=$(kubectl get secret -o name -n $chosenNamespace | grep postgres | grep -v carama-postgres-db)
    secretsArray=()
    populate_secrets_array

    if [ $unattended = "true" ]
    then
        for secret in ${secretsArray[@]} ;
        do
            chosenSecret=$secret
            decode_secret $chosenSecret
        done
    else
        secretsLen=${#secretsArray[@]}
        if [ $secretsLen -lt 10 ]
        then
            secretsOption=[1-$secretsLen]
        else
            lastDigit="${secretsLen: -1}"
            secretsOption="[1-9] | 1[0-$lastDigit]"
        fi
        clear
        echo "--------------------------------------"
        echo "          D A T A B A S E S "
        echo "--------------------------------------"
        i=1
        for secret in ${secretsArray[@]} ;
        do
            echo $i - $secret
            i=$((i+1))
        done
        echo ""
        echo "Other options:"
        echo "c - Console - open a shell inside Kubernetes cluster"
        echo ""
        echo "q - EXIT"
        echo ""
        read_secrets_menu_options
    fi


}


function show_menus () {
    clear
    echo "--------------------------------------"
    echo "         N A M E S P A C E S"
    echo "--------------------------------------"
    i=1
    for namespace in ${namespacesArray[@]} ;
    do
        echo $i - $namespace
        i=$((i+1))
    done
    echo ""
    echo "q - EXIT"
    read_main_menu_options
}

function read_main_menu_options () {
    local choice
    read -p "Select namespace " choice
    chosenNamespace=${namespacesArray[$choice]}
    case $choice in
        q) bring_it_all_down ;;
        $option) show_secrets_menu ;;
        *) echo "Select a number from the list or press 'q' to exit" && sleep 2
    esac
}


# GLOBALS
parentPID=$(ps -p $$ -o pgid=)
serverPID=0
unattended="false"
reset_all_dbs="false"
say_yes="false"

#consoleNamespace="carama-private-ammar"
consoleImage="persiancookbook/portaloo:1.3"
#consoleName="portaloo"
#podName=$(kubectl get pod -n $consoleNamespace -o custom-columns=:metadata.name | grep $consoleName)

# RUN
while getopts n:yrh option
do
    case "${option}" in
        n) chosenNamespace=${OPTARG};;
        r) reset_all_dbs="true";;
        y) say_yes="true";;
        h) echo "-n <NAMESPACE>, -r reset all databases -y automatically answer 'yes' when asked" && exit
    esac
done

echo "chosenNamespace: $chosenNamespace"
echo "reset: $reset_all_dbs"
echo "yes: $say_yes"
echo ""

if [[ ( ! -z "$chosenNamespace" ) && ( $reset_all_dbs = "true" ) && ( $say_yes = "true" ) ]]
then
    echo "Deleting EVERYTHING in ALL databases associated with $chosenNamespace environment. Script will exit when done"
    unattended="true"
    show_secrets_menu
else
    namespaces=$(kubectl get ns | awk '{print $1}' | grep carama)
    namespacesArray=()
    populate_namespaces_array
    len=${#namespacesArray[@]}
    option=[1-$len]
    show_menus
fi
